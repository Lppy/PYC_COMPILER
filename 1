In file included from y_C_compiler_yacc.y:2:0:
symbol.h:11:1: warning: parameter names (without types) in function declaration
 S_symbol S_Symbol(string);
 ^
symbol.h:14:1: error: unknown type name ‘string’
 string S_name(S_symbol);
 ^
In file included from l_C_compiler_lex.l:4:0,
                 from y_C_compiler_yacc.y:4:
y_C_compiler_yacc.y:14:20: error: unknown type name ‘A_exp’
 %union {int num; char* id; A_exp exp; A_expList expList; A_var var; A_efield efield; A_efieldList efieldList; 
                    ^
y_C_compiler_yacc.y:14:31: error: unknown type name ‘A_expList’
 %union {int num; char* id; A_exp exp; A_expList expList; A_var var; A_efield efield; A_efieldList efieldList; 
                               ^
y_C_compiler_yacc.y:14:50: error: unknown type name ‘A_var’
 %union {int num; char* id; A_exp exp; A_expList expList; A_var var; A_efield efield; A_efieldList efieldList; 
                                                  ^
y_C_compiler_yacc.y:14:61: error: unknown type name ‘A_efield’
 %union {int num; char* id; A_exp exp; A_expList expList; A_var var; A_efield efield; A_efieldList efieldList; 
                                                             ^
y_C_compiler_yacc.y:14:78: error: unknown type name ‘A_efieldList’
 %union {int num; char* id; A_exp exp; A_expList expList; A_var var; A_efield efield; A_efieldList efieldList; 
                                                                              ^
y_C_compiler_yacc.y:15:30: error: unknown type name ‘A_dec’
         L_constant constant; A_dec dec; A_decList decList; A_ty ty; A_fieldList fieldList;}
                              ^
y_C_compiler_yacc.y:15:41: error: unknown type name ‘A_decList’
         L_constant constant; A_dec dec; A_decList decList; A_ty ty; A_fieldList fieldList;}
                                         ^
y_C_compiler_yacc.y:15:60: error: unknown type name ‘A_ty’
         L_constant constant; A_dec dec; A_decList decList; A_ty ty; A_fieldList fieldList;}
                                                            ^
y_C_compiler_yacc.y:15:69: error: unknown type name ‘A_fieldList’
         L_constant constant; A_dec dec; A_decList decList; A_ty ty; A_fieldList fieldList;}
                                                                     ^
y_C_compiler_yacc.y: In function ‘yyparse’:
y_C_compiler_yacc.y:42:34: warning: passing argument 1 of ‘A_ExpList’ makes pointer from integer without a cast [-Wint-conversion]
         : assignment_expression {$$ = A_ExpList($1, null);}
                                  ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:149:11: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_expList A_ExpList(A_exp head, A_expList tail);
           ^
y_C_compiler_yacc.y:42:22: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         : assignment_expression {$$ = A_ExpList($1, null);}
                      ^
y_C_compiler_yacc.y:43:34: warning: passing argument 1 of ‘A_ExpList’ makes pointer from integer without a cast [-Wint-conversion]
         | argument_expression_list ',' assignment_expression {$$ = A_ExpList($3, $1);}
                                  ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:149:11: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_expList A_ExpList(A_exp head, A_expList tail);
           ^
y_C_compiler_yacc.y:43:50: warning: passing argument 2 of ‘A_ExpList’ makes pointer from integer without a cast [-Wint-conversion]
         | argument_expression_list ',' assignment_expression {$$ = A_ExpList($3, $1);}
                                                  ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:149:11: note: expected ‘A_expList {aka struct A_expList_ *}’ but argument is of type ‘int’
 A_expList A_ExpList(A_exp head, A_expList tail);
           ^
y_C_compiler_yacc.y:43:22: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | argument_expression_list ',' assignment_expression {$$ = A_ExpList($3, $1);}
                      ^
y_C_compiler_yacc.y:50:46: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
                     case L_char: $$ = A_CharExp(pos, $1->u.c); break;
                                              ^
y_C_compiler_yacc.y:51:45: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
                     case L_num: $$ = A_IntExp(pos, $1->u.num); break;
                                             ^
y_C_compiler_yacc.y:52:46: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
                     case L_real: $$ = A_FloatExp(pos, $1->u.real); break;
                                              ^
y_C_compiler_yacc.y:55:18: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | STRING_LITERAL {$$ = A_StringExp(pos, $1);}
                  ^
y_C_compiler_yacc.y:56:34: warning: passing argument 2 of ‘A_SeqExp’ makes pointer from integer without a cast [-Wint-conversion]
         | '(' expression ')' {$$ = A_SeqExp(pos, $2);}
                                  ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:112:7: note: expected ‘A_expList {aka struct A_expList_ *}’ but argument is of type ‘int’
 A_exp A_SeqExp(A_pos pos, A_expList seq);
       ^
y_C_compiler_yacc.y:56:18: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | '(' expression ')' {$$ = A_SeqExp(pos, $2);}
                  ^
y_C_compiler_yacc.y:62:18: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | IDENTIFIER '(' ')' {$$ = A_CallExp(pos, S_Symbol($1), null);}
                  ^
y_C_compiler_yacc.y:63:61: warning: passing argument 3 of ‘A_CallExp’ makes pointer from integer without a cast [-Wint-conversion]
         | IDENTIFIER '(' argument_expression_list ')' {$$ = A_CallExp(pos, S_Symbol($1), $3);}
                                                             ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:108:7: note: expected ‘A_expList {aka struct A_expList_ *}’ but argument is of type ‘int’
 A_exp A_CallExp(A_pos pos, S_symbol func, A_expList args);
       ^
y_C_compiler_yacc.y:63:18: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | IDENTIFIER '(' argument_expression_list ')' {$$ = A_CallExp(pos, S_Symbol($1), $3);}
                  ^
y_C_compiler_yacc.y:68:18: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         : IDENTIFIER {$$ = A_SimpleVar(pos, S_Symbol($1));}
                  ^
y_C_compiler_yacc.y:69:71: warning: passing argument 2 of ‘A_SeqExp’ makes pointer from integer without a cast [-Wint-conversion]
         | postfix_var '[' expression ']' {$$ = A_SubscriptVar(pos, $1, A_SeqExp(pos, $3));}
                                                                       ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:112:7: note: expected ‘A_expList {aka struct A_expList_ *}’ but argument is of type ‘int’
 A_exp A_SeqExp(A_pos pos, A_expList seq);
       ^
y_C_compiler_yacc.y:69:40: warning: passing argument 2 of ‘A_SubscriptVar’ makes pointer from integer without a cast [-Wint-conversion]
         | postfix_var '[' expression ']' {$$ = A_SubscriptVar(pos, $1, A_SeqExp(pos, $3));}
                                        ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:99:7: note: expected ‘A_var {aka struct A_var_ *}’ but argument is of type ‘int’
 A_var A_SubscriptVar(A_pos pos, A_var var, A_exp exp);
       ^
y_C_compiler_yacc.y:69:18: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | postfix_var '[' expression ']' {$$ = A_SubscriptVar(pos, $1, A_SeqExp(pos, $3));}
                  ^
y_C_compiler_yacc.y:70:36: warning: passing argument 2 of ‘A_FieldVar’ makes pointer from integer without a cast [-Wint-conversion]
         | postfix_var '.' IDENTIFIER {$$ = A_FieldVar(pos, $1, S_Symbol($3));}
                                    ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:98:7: note: expected ‘A_var {aka struct A_var_ *}’ but argument is of type ‘int’
 A_var A_FieldVar(A_pos pos, A_var var, S_symbol sym);
       ^
y_C_compiler_yacc.y:70:18: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | postfix_var '.' IDENTIFIER {$$ = A_FieldVar(pos, $1, S_Symbol($3));}
                  ^
y_C_compiler_yacc.y:71:56: warning: passing argument 2 of ‘A_SubscriptVar’ makes pointer from integer without a cast [-Wint-conversion]
         | postfix_var PTR_OP IDENTIFIER {$$ = A_FieldVar(pos, A_SubscriptVar(pos, $1, A_IntExp(pos, 0)), S_Symbol($3)); }
                                                        ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:99:7: note: expected ‘A_var {aka struct A_var_ *}’ but argument is of type ‘int’
 A_var A_SubscriptVar(A_pos pos, A_var var, A_exp exp);
       ^
y_C_compiler_yacc.y:71:18: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | postfix_var PTR_OP IDENTIFIER {$$ = A_FieldVar(pos, A_SubscriptVar(pos, $1, A_IntExp(pos, 0)), S_Symbol($3)); }
                  ^
y_C_compiler_yacc.y:78:37: warning: passing argument 2 of ‘A_SubscriptVar’ makes pointer from integer without a cast [-Wint-conversion]
         | '*' unary_var {$$=A_SubscriptVar(pos,$2,A_IntExp(pos, 0));}
                                     ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:99:7: note: expected ‘A_var {aka struct A_var_ *}’ but argument is of type ‘int’
 A_var A_SubscriptVar(A_pos pos, A_var var, A_exp exp);
       ^
y_C_compiler_yacc.y:78:17: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | '*' unary_var {$$=A_SubscriptVar(pos,$2,A_IntExp(pos, 0));}
                 ^
y_C_compiler_yacc.y:83:34: warning: passing argument 2 of ‘A_VarExp’ makes pointer from integer without a cast [-Wint-conversion]
         : unary_var {$$ = A_VarExp(pos, $1);}
                                  ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:102:7: note: expected ‘A_var {aka struct A_var_ *}’ but argument is of type ‘int’
 A_exp A_VarExp(A_pos pos, A_var var);
       ^
y_C_compiler_yacc.y:83:18: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         : unary_var {$$ = A_VarExp(pos, $1);}
                  ^
y_C_compiler_yacc.y:85:45: warning: passing argument 3 of ‘A_UnaryExp’ makes pointer from integer without a cast [-Wint-conversion]
         | '&' unary_expression {$$ = A_UnaryExp(pos, A_adrOp, $2);}
                                             ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:111:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_UnaryExp(A_pos pos, A_unoper oper, A_exp exp);
       ^
y_C_compiler_yacc.y:85:18: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | '&' unary_expression {$$ = A_UnaryExp(pos, A_adrOp, $2);}
                  ^
y_C_compiler_yacc.y:86:46: warning: passing argument 3 of ‘A_UnaryExp’ makes pointer from integer without a cast [-Wint-conversion]
         | '~' unary_expression {$$ = A_UnaryExp(pos, A_bnotOp, $2);}
                                              ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:111:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_UnaryExp(A_pos pos, A_unoper oper, A_exp exp);
       ^
y_C_compiler_yacc.y:86:18: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | '~' unary_expression {$$ = A_UnaryExp(pos, A_bnotOp, $2);}
                  ^
y_C_compiler_yacc.y:87:45: warning: passing argument 3 of ‘A_UnaryExp’ makes pointer from integer without a cast [-Wint-conversion]
         | '!' unary_expression {$$ = A_UnaryExp(pos, A_notOp, $2);}
                                             ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:111:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_UnaryExp(A_pos pos, A_unoper oper, A_exp exp);
       ^
y_C_compiler_yacc.y:87:18: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | '!' unary_expression {$$ = A_UnaryExp(pos, A_notOp, $2);}
                  ^
y_C_compiler_yacc.y:98:44: warning: passing argument 3 of ‘A_OpExp’ makes pointer from integer without a cast [-Wint-conversion]
         | multiplicative_expression '*' cast_expression  {$$ = A_OpExp(pos, A_timesOp, $1, $3);}
                                            ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:110:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_OpExp(A_pos pos, A_oper oper, A_exp left, A_exp right);
       ^
y_C_compiler_yacc.y:98:61: warning: passing argument 4 of ‘A_OpExp’ makes pointer from integer without a cast [-Wint-conversion]
         | multiplicative_expression '*' cast_expression  {$$ = A_OpExp(pos, A_timesOp, $1, $3);}
                                                             ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:110:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_OpExp(A_pos pos, A_oper oper, A_exp left, A_exp right);
       ^
y_C_compiler_yacc.y:98:18: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | multiplicative_expression '*' cast_expression  {$$ = A_OpExp(pos, A_timesOp, $1, $3);}
                  ^
y_C_compiler_yacc.y:99:45: warning: passing argument 3 of ‘A_OpExp’ makes pointer from integer without a cast [-Wint-conversion]
         | multiplicative_expression '/' cast_expression  {$$ = A_OpExp(pos, A_divideOp, $1, $3);}
                                             ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:110:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_OpExp(A_pos pos, A_oper oper, A_exp left, A_exp right);
       ^
y_C_compiler_yacc.y:99:62: warning: passing argument 4 of ‘A_OpExp’ makes pointer from integer without a cast [-Wint-conversion]
         | multiplicative_expression '/' cast_expression  {$$ = A_OpExp(pos, A_divideOp, $1, $3);}
                                                              ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:110:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_OpExp(A_pos pos, A_oper oper, A_exp left, A_exp right);
       ^
y_C_compiler_yacc.y:99:18: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | multiplicative_expression '/' cast_expression  {$$ = A_OpExp(pos, A_divideOp, $1, $3);}
                  ^
y_C_compiler_yacc.y:100:42: warning: passing argument 3 of ‘A_OpExp’ makes pointer from integer without a cast [-Wint-conversion]
         | multiplicative_expression '%' cast_expression  {$$ = A_OpExp(pos, A_modOp, $1, $3);}
                                          ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:110:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_OpExp(A_pos pos, A_oper oper, A_exp left, A_exp right);
       ^
y_C_compiler_yacc.y:100:59: warning: passing argument 4 of ‘A_OpExp’ makes pointer from integer without a cast [-Wint-conversion]
         | multiplicative_expression '%' cast_expression  {$$ = A_OpExp(pos, A_modOp, $1, $3);}
                                                           ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:110:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_OpExp(A_pos pos, A_oper oper, A_exp left, A_exp right);
       ^
y_C_compiler_yacc.y:100:18: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | multiplicative_expression '%' cast_expression  {$$ = A_OpExp(pos, A_modOp, $1, $3);}
                  ^
y_C_compiler_yacc.y:106:43: warning: passing argument 3 of ‘A_OpExp’ makes pointer from integer without a cast [-Wint-conversion]
         | additive_expression '+' multiplicative_expression  {$$ = A_OpExp(pos, A_plusOp, $1, $3);}
                                           ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:110:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_OpExp(A_pos pos, A_oper oper, A_exp left, A_exp right);
       ^
y_C_compiler_yacc.y:106:60: warning: passing argument 4 of ‘A_OpExp’ makes pointer from integer without a cast [-Wint-conversion]
         | additive_expression '+' multiplicative_expression  {$$ = A_OpExp(pos, A_plusOp, $1, $3);}
                                                            ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:110:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_OpExp(A_pos pos, A_oper oper, A_exp left, A_exp right);
       ^
y_C_compiler_yacc.y:106:18: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | additive_expression '+' multiplicative_expression  {$$ = A_OpExp(pos, A_plusOp, $1, $3);}
                  ^
y_C_compiler_yacc.y:107:44: warning: passing argument 3 of ‘A_OpExp’ makes pointer from integer without a cast [-Wint-conversion]
         | additive_expression '-' multiplicative_expression  {$$ = A_OpExp(pos, A_minusOp, $1, $3);}
                                            ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:110:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_OpExp(A_pos pos, A_oper oper, A_exp left, A_exp right);
       ^
y_C_compiler_yacc.y:107:61: warning: passing argument 4 of ‘A_OpExp’ makes pointer from integer without a cast [-Wint-conversion]
         | additive_expression '-' multiplicative_expression  {$$ = A_OpExp(pos, A_minusOp, $1, $3);}
                                                             ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:110:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_OpExp(A_pos pos, A_oper oper, A_exp left, A_exp right);
       ^
y_C_compiler_yacc.y:107:18: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | additive_expression '-' multiplicative_expression  {$$ = A_OpExp(pos, A_minusOp, $1, $3);}
                  ^
y_C_compiler_yacc.y:113:43: warning: passing argument 3 of ‘A_OpExp’ makes pointer from integer without a cast [-Wint-conversion]
         | shift_expression LEFT_OP additive_expression  {$$ = A_OpExp(pos, A_leftOp, $1, $3);}
                                           ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:110:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_OpExp(A_pos pos, A_oper oper, A_exp left, A_exp right);
       ^
y_C_compiler_yacc.y:113:60: warning: passing argument 4 of ‘A_OpExp’ makes pointer from integer without a cast [-Wint-conversion]
         | shift_expression LEFT_OP additive_expression  {$$ = A_OpExp(pos, A_leftOp, $1, $3);}
                                                            ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:110:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_OpExp(A_pos pos, A_oper oper, A_exp left, A_exp right);
       ^
y_C_compiler_yacc.y:113:18: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | shift_expression LEFT_OP additive_expression  {$$ = A_OpExp(pos, A_leftOp, $1, $3);}
                  ^
y_C_compiler_yacc.y:114:44: warning: passing argument 3 of ‘A_OpExp’ makes pointer from integer without a cast [-Wint-conversion]
         | shift_expression RIGHT_OP additive_expression  {$$ = A_OpExp(pos, A_rightOp, $1, $3);}
                                            ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:110:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_OpExp(A_pos pos, A_oper oper, A_exp left, A_exp right);
       ^
y_C_compiler_yacc.y:114:61: warning: passing argument 4 of ‘A_OpExp’ makes pointer from integer without a cast [-Wint-conversion]
         | shift_expression RIGHT_OP additive_expression  {$$ = A_OpExp(pos, A_rightOp, $1, $3);}
                                                             ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:110:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_OpExp(A_pos pos, A_oper oper, A_exp left, A_exp right);
       ^
y_C_compiler_yacc.y:114:18: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | shift_expression RIGHT_OP additive_expression  {$$ = A_OpExp(pos, A_rightOp, $1, $3);}
                  ^
y_C_compiler_yacc.y:120:41: warning: passing argument 3 of ‘A_OpExp’ makes pointer from integer without a cast [-Wint-conversion]
         | relational_expression '<' shift_expression   {$$ = A_OpExp(pos, A_ltOp, $1, $3);}
                                         ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:110:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_OpExp(A_pos pos, A_oper oper, A_exp left, A_exp right);
       ^
y_C_compiler_yacc.y:120:58: warning: passing argument 4 of ‘A_OpExp’ makes pointer from integer without a cast [-Wint-conversion]
         | relational_expression '<' shift_expression   {$$ = A_OpExp(pos, A_ltOp, $1, $3);}
                                                          ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:110:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_OpExp(A_pos pos, A_oper oper, A_exp left, A_exp right);
       ^
y_C_compiler_yacc.y:120:18: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | relational_expression '<' shift_expression   {$$ = A_OpExp(pos, A_ltOp, $1, $3);}
                  ^
y_C_compiler_yacc.y:121:41: warning: passing argument 3 of ‘A_OpExp’ makes pointer from integer without a cast [-Wint-conversion]
         | relational_expression '>' shift_expression   {$$ = A_OpExp(pos, A_gtOp, $1, $3);}
                                         ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:110:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_OpExp(A_pos pos, A_oper oper, A_exp left, A_exp right);
       ^
y_C_compiler_yacc.y:121:58: warning: passing argument 4 of ‘A_OpExp’ makes pointer from integer without a cast [-Wint-conversion]
         | relational_expression '>' shift_expression   {$$ = A_OpExp(pos, A_gtOp, $1, $3);}
                                                          ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:110:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_OpExp(A_pos pos, A_oper oper, A_exp left, A_exp right);
       ^
y_C_compiler_yacc.y:121:18: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | relational_expression '>' shift_expression   {$$ = A_OpExp(pos, A_gtOp, $1, $3);}
                  ^
y_C_compiler_yacc.y:122:41: warning: passing argument 3 of ‘A_OpExp’ makes pointer from integer without a cast [-Wint-conversion]
         | relational_expression LE_OP shift_expression   {$$ = A_OpExp(pos, A_leOp, $1, $3);}
                                         ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:110:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_OpExp(A_pos pos, A_oper oper, A_exp left, A_exp right);
       ^
y_C_compiler_yacc.y:122:58: warning: passing argument 4 of ‘A_OpExp’ makes pointer from integer without a cast [-Wint-conversion]
         | relational_expression LE_OP shift_expression   {$$ = A_OpExp(pos, A_leOp, $1, $3);}
                                                          ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:110:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_OpExp(A_pos pos, A_oper oper, A_exp left, A_exp right);
       ^
y_C_compiler_yacc.y:122:18: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | relational_expression LE_OP shift_expression   {$$ = A_OpExp(pos, A_leOp, $1, $3);}
                  ^
y_C_compiler_yacc.y:123:41: warning: passing argument 3 of ‘A_OpExp’ makes pointer from integer without a cast [-Wint-conversion]
         | relational_expression GE_OP shift_expression   {$$ = A_OpExp(pos, A_geOp, $1, $3);}
                                         ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:110:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_OpExp(A_pos pos, A_oper oper, A_exp left, A_exp right);
       ^
y_C_compiler_yacc.y:123:58: warning: passing argument 4 of ‘A_OpExp’ makes pointer from integer without a cast [-Wint-conversion]
         | relational_expression GE_OP shift_expression   {$$ = A_OpExp(pos, A_geOp, $1, $3);}
                                                          ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:110:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_OpExp(A_pos pos, A_oper oper, A_exp left, A_exp right);
       ^
y_C_compiler_yacc.y:123:18: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | relational_expression GE_OP shift_expression   {$$ = A_OpExp(pos, A_geOp, $1, $3);}
                  ^
y_C_compiler_yacc.y:129:41: warning: passing argument 3 of ‘A_OpExp’ makes pointer from integer without a cast [-Wint-conversion]
         | equality_expression EQ_OP relational_expression {$$ = A_OpExp(pos, A_eqOp, $1, $3);}
                                         ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:110:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_OpExp(A_pos pos, A_oper oper, A_exp left, A_exp right);
       ^
y_C_compiler_yacc.y:129:58: warning: passing argument 4 of ‘A_OpExp’ makes pointer from integer without a cast [-Wint-conversion]
         | equality_expression EQ_OP relational_expression {$$ = A_OpExp(pos, A_eqOp, $1, $3);}
                                                          ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:110:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_OpExp(A_pos pos, A_oper oper, A_exp left, A_exp right);
       ^
y_C_compiler_yacc.y:129:18: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | equality_expression EQ_OP relational_expression {$$ = A_OpExp(pos, A_eqOp, $1, $3);}
                  ^
y_C_compiler_yacc.y:130:42: warning: passing argument 3 of ‘A_OpExp’ makes pointer from integer without a cast [-Wint-conversion]
         | equality_expression NE_OP relational_expression {$$ = A_OpExp(pos, A_neqOp, $1, $3);}
                                          ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:110:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_OpExp(A_pos pos, A_oper oper, A_exp left, A_exp right);
       ^
y_C_compiler_yacc.y:130:59: warning: passing argument 4 of ‘A_OpExp’ makes pointer from integer without a cast [-Wint-conversion]
         | equality_expression NE_OP relational_expression {$$ = A_OpExp(pos, A_neqOp, $1, $3);}
                                                           ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:110:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_OpExp(A_pos pos, A_oper oper, A_exp left, A_exp right);
       ^
y_C_compiler_yacc.y:130:18: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | equality_expression NE_OP relational_expression {$$ = A_OpExp(pos, A_neqOp, $1, $3);}
                  ^
y_C_compiler_yacc.y:136:42: warning: passing argument 3 of ‘A_OpExp’ makes pointer from integer without a cast [-Wint-conversion]
         | and_expression '&' equality_expression {$$ = A_OpExp(pos, A_andOp, $1, $3);}
                                          ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:110:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_OpExp(A_pos pos, A_oper oper, A_exp left, A_exp right);
       ^
y_C_compiler_yacc.y:136:59: warning: passing argument 4 of ‘A_OpExp’ makes pointer from integer without a cast [-Wint-conversion]
         | and_expression '&' equality_expression {$$ = A_OpExp(pos, A_andOp, $1, $3);}
                                                           ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:110:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_OpExp(A_pos pos, A_oper oper, A_exp left, A_exp right);
       ^
y_C_compiler_yacc.y:136:18: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | and_expression '&' equality_expression {$$ = A_OpExp(pos, A_andOp, $1, $3);}
                  ^
y_C_compiler_yacc.y:142:42: warning: passing argument 3 of ‘A_OpExp’ makes pointer from integer without a cast [-Wint-conversion]
         | exclusive_or_expression '^' and_expression {$$ = A_OpExp(pos, A_eorOp, $1, $3);}
                                          ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:110:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_OpExp(A_pos pos, A_oper oper, A_exp left, A_exp right);
       ^
y_C_compiler_yacc.y:142:59: warning: passing argument 4 of ‘A_OpExp’ makes pointer from integer without a cast [-Wint-conversion]
         | exclusive_or_expression '^' and_expression {$$ = A_OpExp(pos, A_eorOp, $1, $3);}
                                                           ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:110:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_OpExp(A_pos pos, A_oper oper, A_exp left, A_exp right);
       ^
y_C_compiler_yacc.y:142:18: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | exclusive_or_expression '^' and_expression {$$ = A_OpExp(pos, A_eorOp, $1, $3);}
                  ^
y_C_compiler_yacc.y:148:41: warning: passing argument 3 of ‘A_OpExp’ makes pointer from integer without a cast [-Wint-conversion]
         | inclusive_or_expression '|' exclusive_or_expression {$$ = A_OpExp(pos, A_orOp, $1, $3);}
                                         ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:110:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_OpExp(A_pos pos, A_oper oper, A_exp left, A_exp right);
       ^
y_C_compiler_yacc.y:148:58: warning: passing argument 4 of ‘A_OpExp’ makes pointer from integer without a cast [-Wint-conversion]
         | inclusive_or_expression '|' exclusive_or_expression {$$ = A_OpExp(pos, A_orOp, $1, $3);}
                                                          ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:110:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_OpExp(A_pos pos, A_oper oper, A_exp left, A_exp right);
       ^
y_C_compiler_yacc.y:148:18: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | inclusive_or_expression '|' exclusive_or_expression {$$ = A_OpExp(pos, A_orOp, $1, $3);}
                  ^
y_C_compiler_yacc.y:154:43: warning: passing argument 3 of ‘A_OpExp’ makes pointer from integer without a cast [-Wint-conversion]
         | logical_and_expression AND_OP inclusive_or_expression {$$ = A_OpExp(pos, A_landOp, $1, $3);}
                                           ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:110:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_OpExp(A_pos pos, A_oper oper, A_exp left, A_exp right);
       ^
y_C_compiler_yacc.y:154:60: warning: passing argument 4 of ‘A_OpExp’ makes pointer from integer without a cast [-Wint-conversion]
         | logical_and_expression AND_OP inclusive_or_expression {$$ = A_OpExp(pos, A_landOp, $1, $3);}
                                                            ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:110:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_OpExp(A_pos pos, A_oper oper, A_exp left, A_exp right);
       ^
y_C_compiler_yacc.y:154:18: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | logical_and_expression AND_OP inclusive_or_expression {$$ = A_OpExp(pos, A_landOp, $1, $3);}
                  ^
y_C_compiler_yacc.y:160:42: warning: passing argument 3 of ‘A_OpExp’ makes pointer from integer without a cast [-Wint-conversion]
         | logical_or_expression OR_OP logical_and_expression {$$ = A_OpExp(pos, A_lorOp, $1, $3);}
                                          ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:110:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_OpExp(A_pos pos, A_oper oper, A_exp left, A_exp right);
       ^
y_C_compiler_yacc.y:160:59: warning: passing argument 4 of ‘A_OpExp’ makes pointer from integer without a cast [-Wint-conversion]
         | logical_or_expression OR_OP logical_and_expression {$$ = A_OpExp(pos, A_lorOp, $1, $3);}
                                                           ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:110:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_OpExp(A_pos pos, A_oper oper, A_exp left, A_exp right);
       ^
y_C_compiler_yacc.y:160:18: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | logical_or_expression OR_OP logical_and_expression {$$ = A_OpExp(pos, A_lorOp, $1, $3);}
                  ^
y_C_compiler_yacc.y:166:64: warning: passing argument 2 of ‘A_SeqExp’ makes pointer from integer without a cast [-Wint-conversion]
         | logical_or_expression '?' expression ':' conditional_expression {$$ = A_ConExp(pos, $1, A_SeqExp(pos,$3), $5);}
                                                                ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:112:7: note: expected ‘A_expList {aka struct A_expList_ *}’ but argument is of type ‘int’
 A_exp A_SeqExp(A_pos pos, A_expList seq);
       ^
y_C_compiler_yacc.y:166:34: warning: passing argument 2 of ‘A_ConExp’ makes pointer from integer without a cast [-Wint-conversion]
         | logical_or_expression '?' expression ':' conditional_expression {$$ = A_ConExp(pos, $1, A_SeqExp(pos,$3), $5);}
                                  ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:109:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_ConExp(A_pos pos, A_exp left, A_exp mid, A_exp right);
       ^
y_C_compiler_yacc.y:166:86: warning: passing argument 4 of ‘A_ConExp’ makes pointer from integer without a cast [-Wint-conversion]
         | logical_or_expression '?' expression ':' conditional_expression {$$ = A_ConExp(pos, $1, A_SeqExp(pos,$3), $5);}
                                                                                      ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:109:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_ConExp(A_pos pos, A_exp left, A_exp mid, A_exp right);
       ^
y_C_compiler_yacc.y:166:18: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | logical_or_expression '?' expression ':' conditional_expression {$$ = A_ConExp(pos, $1, A_SeqExp(pos,$3), $5);}
                  ^
y_C_compiler_yacc.y:171:34: warning: passing argument 1 of ‘A_ExpList’ makes pointer from integer without a cast [-Wint-conversion]
         : assignment_expression {$$ = A_ExpList($1, null);}
                                  ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:149:11: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_expList A_ExpList(A_exp head, A_expList tail);
           ^
y_C_compiler_yacc.y:171:22: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         : assignment_expression {$$ = A_ExpList($1, null);}
                      ^
y_C_compiler_yacc.y:172:34: warning: passing argument 1 of ‘A_ExpList’ makes pointer from integer without a cast [-Wint-conversion]
         | expression ',' assignment_expression {$$ = A_ExpList($3, $1);}
                                  ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:149:11: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_expList A_ExpList(A_exp head, A_expList tail);
           ^
y_C_compiler_yacc.y:172:50: warning: passing argument 2 of ‘A_ExpList’ makes pointer from integer without a cast [-Wint-conversion]
         | expression ',' assignment_expression {$$ = A_ExpList($3, $1);}
                                                  ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:149:11: note: expected ‘A_expList {aka struct A_expList_ *}’ but argument is of type ‘int’
 A_expList A_ExpList(A_exp head, A_expList tail);
           ^
y_C_compiler_yacc.y:172:22: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | expression ',' assignment_expression {$$ = A_ExpList($3, $1);}
                      ^
y_C_compiler_yacc.y:178:37: warning: passing argument 2 of ‘A_AssignExp’ makes pointer from integer without a cast [-Wint-conversion]
         | unary_var '=' assignment_expression {$$ = A_AssignExp(pos, $1, $3);}
                                     ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:113:7: note: expected ‘A_var {aka struct A_var_ *}’ but argument is of type ‘int’
 A_exp A_AssignExp(A_pos pos, A_var var, A_exp exp);
       ^
y_C_compiler_yacc.y:178:54: warning: passing argument 3 of ‘A_AssignExp’ makes pointer from integer without a cast [-Wint-conversion]
         | unary_var '=' assignment_expression {$$ = A_AssignExp(pos, $1, $3);}
                                                      ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:113:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_AssignExp(A_pos pos, A_var var, A_exp exp);
       ^
y_C_compiler_yacc.y:178:18: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | unary_var '=' assignment_expression {$$ = A_AssignExp(pos, $1, $3);}
                  ^
y_C_compiler_yacc.y:188:20: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         : IDENTIFIER {$$=A_Efield(S_Symbol($1),null);}
                    ^
y_C_compiler_yacc.y:189:55: warning: passing argument 2 of ‘A_Efield’ makes pointer from integer without a cast [-Wint-conversion]
         | IDENTIFIER '=' initializer {$$=A_Efield(S_Symbol($1),$3);}
                                                       ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:134:10: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_efield A_Efield(S_symbol name, A_exp init);
          ^
y_C_compiler_yacc.y:189:20: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | IDENTIFIER '=' initializer {$$=A_Efield(S_Symbol($1),$3);}
                    ^
y_C_compiler_yacc.y:194:38: warning: passing argument 1 of ‘A_EfieldList’ makes pointer from integer without a cast [-Wint-conversion]
         : init_declarator {$$=A_EfieldList($1,null);}
                                      ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:133:14: note: expected ‘A_efield {aka struct A_efield_ *}’ but argument is of type ‘int’
 A_efieldList A_EfieldList(A_efield head, A_efieldList tail);
              ^
y_C_compiler_yacc.y:194:24: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         : init_declarator {$$=A_EfieldList($1,null);}
                        ^
y_C_compiler_yacc.y:195:38: warning: passing argument 1 of ‘A_EfieldList’ makes pointer from integer without a cast [-Wint-conversion]
         | init_declarator_list ',' init_declarator {$$=A_EfieldList($3,$1);}
                                      ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:133:14: note: expected ‘A_efield {aka struct A_efield_ *}’ but argument is of type ‘int’
 A_efieldList A_EfieldList(A_efield head, A_efieldList tail);
              ^
y_C_compiler_yacc.y:195:56: warning: passing argument 2 of ‘A_EfieldList’ makes pointer from integer without a cast [-Wint-conversion]
         | init_declarator_list ',' init_declarator {$$=A_EfieldList($3,$1);}
                                                        ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:133:14: note: expected ‘A_efieldList {aka struct A_efieldList_ *}’ but argument is of type ‘int’
 A_efieldList A_EfieldList(A_efield head, A_efieldList tail);
              ^
y_C_compiler_yacc.y:195:24: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | init_declarator_list ',' init_declarator {$$=A_EfieldList($3,$1);}
                        ^
y_C_compiler_yacc.y:205:32: warning: passing argument 1 of ‘A_DecList’ makes pointer from integer without a cast [-Wint-conversion]
         : external_declaration {$$=A_DecList($1, null);}
                                ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:147:11: note: expected ‘A_dec {aka struct A_dec_ *}’ but argument is of type ‘int’
 A_decList A_DecList(A_dec head, A_decList tail);
           ^
y_C_compiler_yacc.y:205:21: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         : external_declaration {$$=A_DecList($1, null);}
                     ^
y_C_compiler_yacc.y:206:32: warning: passing argument 1 of ‘A_DecList’ makes pointer from integer without a cast [-Wint-conversion]
         | translation_unit external_declaration {$$=A_DecList($2, $1);}
                                ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:147:11: note: expected ‘A_dec {aka struct A_dec_ *}’ but argument is of type ‘int’
 A_decList A_DecList(A_dec head, A_decList tail);
           ^
y_C_compiler_yacc.y:206:48: warning: passing argument 2 of ‘A_DecList’ makes pointer from integer without a cast [-Wint-conversion]
         | translation_unit external_declaration {$$=A_DecList($2, $1);}
                                                ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:147:11: note: expected ‘A_decList {aka struct A_decList_ *}’ but argument is of type ‘int’
 A_decList A_DecList(A_dec head, A_decList tail);
           ^
y_C_compiler_yacc.y:206:21: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | translation_unit external_declaration {$$=A_DecList($2, $1);}
                     ^
y_C_compiler_yacc.y:213:34: warning: passing argument 2 of ‘A_StructDec’ from incompatible pointer type [-Wincompatible-pointer-types]
         | STRUCT IDENTIFIER '{' struct_declaration_list '}' {$$=A_StructDec(pos,A_StructTy(S_Symbol($2)),$4);}
                                  ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:138:7: note: expected ‘S_symbol {aka struct S_symbol_ *}’ but argument is of type ‘A_ty {aka struct A_ty_ *}’
 A_dec A_StructDec(A_pos pos, S_symbol name, A_fieldList structure);
       ^
y_C_compiler_yacc.y:213:71: warning: passing argument 3 of ‘A_StructDec’ makes pointer from integer without a cast [-Wint-conversion]
         | STRUCT IDENTIFIER '{' struct_declaration_list '}' {$$=A_StructDec(pos,A_StructTy(S_Symbol($2)),$4);}
                                                                       ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:138:7: note: expected ‘A_fieldList {aka struct A_fieldList_ *}’ but argument is of type ‘int’
 A_dec A_StructDec(A_pos pos, S_symbol name, A_fieldList structure);
       ^
y_C_compiler_yacc.y:213:17: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | STRUCT IDENTIFIER '{' struct_declaration_list '}' {$$=A_StructDec(pos,A_StructTy(S_Symbol($2)),$4);}
                 ^
y_C_compiler_yacc.y:218:31: warning: passing argument 2 of ‘A_VarDec’ makes pointer from integer without a cast [-Wint-conversion]
         : declaration_specifiers init_declarator_list ';' {$$=A_VarDec(pos,$2,$1);}
                               ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:132:7: note: expected ‘A_efieldList {aka struct A_efieldList_ *}’ but argument is of type ‘int’
 A_dec A_VarDec(A_pos pos, A_efieldList varList, A_ty typ);
       ^
y_C_compiler_yacc.y:218:54: warning: passing argument 3 of ‘A_VarDec’ makes pointer from integer without a cast [-Wint-conversion]
         : declaration_specifiers init_declarator_list ';' {$$=A_VarDec(pos,$2,$1);}
                                                      ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:132:7: note: expected ‘A_ty {aka struct A_ty_ *}’ but argument is of type ‘int’
 A_dec A_VarDec(A_pos pos, A_efieldList varList, A_ty typ);
       ^
y_C_compiler_yacc.y:218:17: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         : declaration_specifiers init_declarator_list ';' {$$=A_VarDec(pos,$2,$1);}
                 ^
y_C_compiler_yacc.y:223:61: warning: passing argument 3 of ‘A_FunctionDec’ makes pointer from integer without a cast [-Wint-conversion]
         : declaration_specifiers IDENTIFIER '(' parameter_type_list ')' compound_statement {$$=A_FunctionDec(pos,S_Symbol($2),$4,$1,$6);}
                                                             ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:128:7: note: expected ‘A_fieldList {aka struct A_fieldList_ *}’ but argument is of type ‘int’
 A_dec A_FunctionDec(A_pos pos, S_symbol name, A_fieldList params, A_ty result, A_exp body);
       ^
y_C_compiler_yacc.y:223:83: warning: passing argument 4 of ‘A_FunctionDec’ makes pointer from integer without a cast [-Wint-conversion]
         : declaration_specifiers IDENTIFIER '(' parameter_type_list ')' compound_statement {$$=A_FunctionDec(pos,S_Symbol($2),$4,$1,$6);}
                                                                                   ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:128:7: note: expected ‘A_ty {aka struct A_ty_ *}’ but argument is of type ‘int’
 A_dec A_FunctionDec(A_pos pos, S_symbol name, A_fieldList params, A_ty result, A_exp body);
       ^
y_C_compiler_yacc.y:223:98: warning: passing argument 5 of ‘A_FunctionDec’ makes pointer from integer without a cast [-Wint-conversion]
         : declaration_specifiers IDENTIFIER '(' parameter_type_list ')' compound_statement {$$=A_FunctionDec(pos,S_Symbol($2),$4,$1,$6);}
                                                                                                  ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:128:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_dec A_FunctionDec(A_pos pos, S_symbol name, A_fieldList params, A_ty result, A_exp body);
       ^
y_C_compiler_yacc.y:223:17: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         : declaration_specifiers IDENTIFIER '(' parameter_type_list ')' compound_statement {$$=A_FunctionDec(pos,S_Symbol($2),$4,$1,$6);}
                 ^
y_C_compiler_yacc.y:224:66: warning: passing argument 4 of ‘A_FunctionDec’ makes pointer from integer without a cast [-Wint-conversion]
         | declaration_specifiers IDENTIFIER '(' ')' compound_statement {$$=A_FunctionDec(pos,S_Symbol($2),null,$1,$5);}
                                                                  ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:128:7: note: expected ‘A_ty {aka struct A_ty_ *}’ but argument is of type ‘int’
 A_dec A_FunctionDec(A_pos pos, S_symbol name, A_fieldList params, A_ty result, A_exp body);
       ^
y_C_compiler_yacc.y:224:81: warning: passing argument 5 of ‘A_FunctionDec’ makes pointer from integer without a cast [-Wint-conversion]
         | declaration_specifiers IDENTIFIER '(' ')' compound_statement {$$=A_FunctionDec(pos,S_Symbol($2),null,$1,$5);}
                                                                                 ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:128:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_dec A_FunctionDec(A_pos pos, S_symbol name, A_fieldList params, A_ty result, A_exp body);
       ^
y_C_compiler_yacc.y:224:17: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | declaration_specifiers IDENTIFIER '(' ')' compound_statement {$$=A_FunctionDec(pos,S_Symbol($2),null,$1,$5);}
                 ^
y_C_compiler_yacc.y:230:16: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | STRUCT IDENTIFIER {$$=A_StructTy(S_Symbol($2));}
                ^
y_C_compiler_yacc.y:231:27: warning: passing argument 1 of ‘A_ArrayTy’ makes pointer from integer without a cast [-Wint-conversion]
         | declaration_specifiers '*' {$$=A_ArrayTy($1,0);}
                           ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:145:6: note: expected ‘A_ty {aka struct A_ty_ *}’ but argument is of type ‘int’
 A_ty A_ArrayTy(A_ty tar, int length);//array type
      ^
y_C_compiler_yacc.y:231:16: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | declaration_specifiers '*' {$$=A_ArrayTy($1,0);}
                ^
y_C_compiler_yacc.y:232:27: warning: passing argument 1 of ‘A_ArrayTy’ makes pointer from integer without a cast [-Wint-conversion]
         | declaration_specifiers '[' constant_expression ']' {$$=A_ArrayTy($1,$3);}
                           ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:145:6: note: expected ‘A_ty {aka struct A_ty_ *}’ but argument is of type ‘int’
 A_ty A_ArrayTy(A_ty tar, int length);//array type
      ^
y_C_compiler_yacc.y:232:16: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | declaration_specifiers '[' constant_expression ']' {$$=A_ArrayTy($1,$3);}
                ^
y_C_compiler_yacc.y:237:16: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         : VOID {$$=A_NameTy(S_Symbol("void"));}
                ^
y_C_compiler_yacc.y:238:16: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | CHAR {$$=A_NameTy(S_Symbol("char"));}
                ^
y_C_compiler_yacc.y:239:16: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | INT {$$=A_NameTy(S_Symbol("int"));}
                ^
y_C_compiler_yacc.y:240:16: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | FLOAT {$$=A_NameTy(S_Symbol("float"));}
                ^
y_C_compiler_yacc.y:246:41: warning: passing argument 1 of ‘A_MergeFieldList’ makes pointer from integer without a cast [-Wint-conversion]
         | struct_declaration_list struct_declaration {$$=A_MergeFieldList($2,$1);}
                                         ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:140:13: note: expected ‘A_fieldList {aka struct A_fieldList_ *}’ but argument is of type ‘int’
 A_fieldList A_MergeFieldList(A_fieldList head, A_fieldList tail);
             ^
y_C_compiler_yacc.y:246:62: warning: passing argument 2 of ‘A_MergeFieldList’ makes pointer from integer without a cast [-Wint-conversion]
         | struct_declaration_list struct_declaration {$$=A_MergeFieldList($2,$1);}
                                                              ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:140:13: note: expected ‘A_fieldList {aka struct A_fieldList_ *}’ but argument is of type ‘int’
 A_fieldList A_MergeFieldList(A_fieldList head, A_fieldList tail);
             ^
y_C_compiler_yacc.y:246:23: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | struct_declaration_list struct_declaration {$$=A_MergeFieldList($2,$1);}
                       ^
y_C_compiler_yacc.y:251:21: warning: assignment makes pointer from integer without a cast [-Wint-conversion]
         : declaration_specifiers {specifiers_type=$1;} struct_declarator_list ';' {$$=$3;}
                     ^
y_C_compiler_yacc.y:256:23: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         : IDENTIFIER {$$=A_FieldList(A_Field(pos,S_Symbol($1),specifiers_type),null);}
                       ^
y_C_compiler_yacc.y:257:89: warning: passing argument 2 of ‘A_FieldList’ makes pointer from integer without a cast [-Wint-conversion]
         | struct_declarator_list ',' IDENTIFIER {$$=A_FieldList(A_Field(pos,S_Symbol($3),specifiers_type),$1);}
                                                                                         ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:139:13: note: expected ‘A_fieldList {aka struct A_fieldList_ *}’ but argument is of type ‘int’
 A_fieldList A_FieldList(A_field head, A_fieldList tail);
             ^
y_C_compiler_yacc.y:257:23: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | struct_declarator_list ',' IDENTIFIER {$$=A_FieldList(A_Field(pos,S_Symbol($3),specifiers_type),$1);}
                       ^
y_C_compiler_yacc.y:262:17: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         : '{' '}' {$$=A_NilExp(pos);}
                 ^
y_C_compiler_yacc.y:263:31: warning: passing argument 2 of ‘A_SeqExp’ makes pointer from integer without a cast [-Wint-conversion]
         | '{' statement_list '}' {$$=A_SeqExp(pos,$2);} 
                               ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:112:7: note: expected ‘A_expList {aka struct A_expList_ *}’ but argument is of type ‘int’
 A_exp A_SeqExp(A_pos pos, A_expList seq);
       ^
y_C_compiler_yacc.y:263:17: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | '{' statement_list '}' {$$=A_SeqExp(pos,$2);} 
                 ^
y_C_compiler_yacc.y:264:31: warning: passing argument 2 of ‘A_LetExp’ makes pointer from integer without a cast [-Wint-conversion]
         | '{' declaration_list '}' {$$=A_LetExp(pos,$2,null);} 
                               ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:119:7: note: expected ‘A_decList {aka struct A_decList_ *}’ but argument is of type ‘int’
 A_exp A_LetExp(A_pos pos, A_decList decs, A_exp body);
       ^
y_C_compiler_yacc.y:264:17: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | '{' declaration_list '}' {$$=A_LetExp(pos,$2,null);} 
                 ^
y_C_compiler_yacc.y:265:31: warning: passing argument 2 of ‘A_LetExp’ makes pointer from integer without a cast [-Wint-conversion]
         | '{' declaration_list statement_list '}' {$$=A_LetExp(pos,$2,$3);} 
                               ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:119:7: note: expected ‘A_decList {aka struct A_decList_ *}’ but argument is of type ‘int’
 A_exp A_LetExp(A_pos pos, A_decList decs, A_exp body);
       ^
y_C_compiler_yacc.y:265:51: warning: passing argument 3 of ‘A_LetExp’ makes pointer from integer without a cast [-Wint-conversion]
         | '{' declaration_list statement_list '}' {$$=A_LetExp(pos,$2,$3);} 
                                                   ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:119:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_LetExp(A_pos pos, A_decList decs, A_exp body);
       ^
y_C_compiler_yacc.y:265:17: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | '{' declaration_list statement_list '}' {$$=A_LetExp(pos,$2,$3);} 
                 ^
y_C_compiler_yacc.y:270:32: warning: passing argument 1 of ‘A_DecList’ makes pointer from integer without a cast [-Wint-conversion]
         : declaration {$$=A_DecList($1,null);}
                                ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:147:11: note: expected ‘A_dec {aka struct A_dec_ *}’ but argument is of type ‘int’
 A_decList A_DecList(A_dec head, A_decList tail);
           ^
y_C_compiler_yacc.y:270:21: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         : declaration {$$=A_DecList($1,null);}
                     ^
y_C_compiler_yacc.y:271:32: warning: passing argument 1 of ‘A_DecList’ makes pointer from integer without a cast [-Wint-conversion]
         | declaration_list declaration {$$=A_DecList($2,$1);}
                                ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:147:11: note: expected ‘A_dec {aka struct A_dec_ *}’ but argument is of type ‘int’
 A_decList A_DecList(A_dec head, A_decList tail);
           ^
y_C_compiler_yacc.y:271:47: warning: passing argument 2 of ‘A_DecList’ makes pointer from integer without a cast [-Wint-conversion]
         | declaration_list declaration {$$=A_DecList($2,$1);}
                                               ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:147:11: note: expected ‘A_decList {aka struct A_decList_ *}’ but argument is of type ‘int’
 A_decList A_DecList(A_dec head, A_decList tail);
           ^
y_C_compiler_yacc.y:271:21: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | declaration_list declaration {$$=A_DecList($2,$1);}
                     ^
y_C_compiler_yacc.y:276:32: warning: passing argument 1 of ‘A_ExpList’ makes pointer from integer without a cast [-Wint-conversion]
         : statement {$$=A_ExpList($1,null);}
                                ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:149:11: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_expList A_ExpList(A_exp head, A_expList tail);
           ^
y_C_compiler_yacc.y:276:21: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         : statement {$$=A_ExpList($1,null);}
                     ^
y_C_compiler_yacc.y:277:32: warning: passing argument 1 of ‘A_ExpList’ makes pointer from integer without a cast [-Wint-conversion]
         | statement_list statement {$$=A_ExpList($2,$1);}
                                ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:149:11: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_expList A_ExpList(A_exp head, A_expList tail);
           ^
y_C_compiler_yacc.y:277:47: warning: passing argument 2 of ‘A_ExpList’ makes pointer from integer without a cast [-Wint-conversion]
         | statement_list statement {$$=A_ExpList($2,$1);}
                                               ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:149:11: note: expected ‘A_expList {aka struct A_expList_ *}’ but argument is of type ‘int’
 A_expList A_ExpList(A_exp head, A_expList tail);
           ^
y_C_compiler_yacc.y:277:21: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | statement_list statement {$$=A_ExpList($2,$1);}
                     ^
y_C_compiler_yacc.y:292:32: warning: passing argument 2 of ‘A_CaseExp’ makes pointer from integer without a cast [-Wint-conversion]
         : CASE constant_expression ':' statement {$$=A_CaseExp(pos,$4,A_IntExp(pos, $2));}
                                ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:120:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_CaseExp(A_pos pos, A_exp constant, A_exp body);
       ^
y_C_compiler_yacc.y:292:17: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         : CASE constant_expression ':' statement {$$=A_CaseExp(pos,$4,A_IntExp(pos, $2));}
                 ^
y_C_compiler_yacc.y:293:32: warning: passing argument 2 of ‘A_CaseExp’ makes pointer from integer without a cast [-Wint-conversion]
         | DEFAULT ':' statement {$$=A_CaseExp(pos,$3,null);}
                                ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:120:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_CaseExp(A_pos pos, A_exp constant, A_exp body);
       ^
y_C_compiler_yacc.y:293:17: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | DEFAULT ':' statement {$$=A_CaseExp(pos,$3,null);}
                 ^
y_C_compiler_yacc.y:298:17: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         : ';' {$$=A_NilExp(pos);}
                 ^
y_C_compiler_yacc.y:299:31: warning: passing argument 2 of ‘A_SeqExp’ makes pointer from integer without a cast [-Wint-conversion]
         | expression ';' {$$=A_SeqExp(pos,$1);}
                               ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:112:7: note: expected ‘A_expList {aka struct A_expList_ *}’ but argument is of type ‘int’
 A_exp A_SeqExp(A_pos pos, A_expList seq);
       ^
y_C_compiler_yacc.y:299:17: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | expression ';' {$$=A_SeqExp(pos,$1);}
                 ^
y_C_compiler_yacc.y:304:43: warning: passing argument 2 of ‘A_SeqExp’ makes pointer from integer without a cast [-Wint-conversion]
         : IF '(' expression ')' statement {$$=A_IfExp(pos,A_SeqExp(pos,$3),$5,null);}
                                           ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:112:7: note: expected ‘A_expList {aka struct A_expList_ *}’ but argument is of type ‘int’
 A_exp A_SeqExp(A_pos pos, A_expList seq);
       ^
y_C_compiler_yacc.y:304:64: warning: passing argument 3 of ‘A_IfExp’ makes pointer from integer without a cast [-Wint-conversion]
         : IF '(' expression ')' statement {$$=A_IfExp(pos,A_SeqExp(pos,$3),$5,null);}
                                                                ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:114:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_IfExp(A_pos pos, A_exp test, A_exp then, A_exp elsee);
       ^
y_C_compiler_yacc.y:304:17: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         : IF '(' expression ')' statement {$$=A_IfExp(pos,A_SeqExp(pos,$3),$5,null);}
                 ^
y_C_compiler_yacc.y:305:43: warning: passing argument 2 of ‘A_SeqExp’ makes pointer from integer without a cast [-Wint-conversion]
         | IF '(' expression ')' statement ELSE statement {$$=A_IfExp(pos,A_SeqExp(pos,$3),$5,$7);}
                                           ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:112:7: note: expected ‘A_expList {aka struct A_expList_ *}’ but argument is of type ‘int’
 A_exp A_SeqExp(A_pos pos, A_expList seq);
       ^
y_C_compiler_yacc.y:305:64: warning: passing argument 3 of ‘A_IfExp’ makes pointer from integer without a cast [-Wint-conversion]
         | IF '(' expression ')' statement ELSE statement {$$=A_IfExp(pos,A_SeqExp(pos,$3),$5,$7);}
                                                                ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:114:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_IfExp(A_pos pos, A_exp test, A_exp then, A_exp elsee);
       ^
y_C_compiler_yacc.y:305:80: warning: passing argument 4 of ‘A_IfExp’ makes pointer from integer without a cast [-Wint-conversion]
         | IF '(' expression ')' statement ELSE statement {$$=A_IfExp(pos,A_SeqExp(pos,$3),$5,$7);}
                                                                                ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:114:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_IfExp(A_pos pos, A_exp test, A_exp then, A_exp elsee);
       ^
y_C_compiler_yacc.y:305:17: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | IF '(' expression ')' statement ELSE statement {$$=A_IfExp(pos,A_SeqExp(pos,$3),$5,$7);}
                 ^
y_C_compiler_yacc.y:306:47: warning: passing argument 2 of ‘A_SeqExp’ makes pointer from integer without a cast [-Wint-conversion]
         | SWITCH '(' expression ')' statement {$$=A_SwitchExp(pos,A_SeqExp(pos,$3),$5);}
                                               ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:112:7: note: expected ‘A_expList {aka struct A_expList_ *}’ but argument is of type ‘int’
 A_exp A_SeqExp(A_pos pos, A_expList seq);
       ^
y_C_compiler_yacc.y:306:68: warning: passing argument 3 of ‘A_SwitchExp’ makes pointer from integer without a cast [-Wint-conversion]
         | SWITCH '(' expression ')' statement {$$=A_SwitchExp(pos,A_SeqExp(pos,$3),$5);}
                                                                    ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:121:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_SwitchExp(A_pos pos, A_exp test, A_exp body);
       ^
y_C_compiler_yacc.y:306:17: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | SWITCH '(' expression ')' statement {$$=A_SwitchExp(pos,A_SeqExp(pos,$3),$5);}
                 ^
y_C_compiler_yacc.y:311:46: warning: passing argument 2 of ‘A_SeqExp’ makes pointer from integer without a cast [-Wint-conversion]
         : WHILE '(' expression ')' statement {$$=A_WhileExp(pos,A_SeqExp(pos,$3),$5);}
                                              ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:112:7: note: expected ‘A_expList {aka struct A_expList_ *}’ but argument is of type ‘int’
 A_exp A_SeqExp(A_pos pos, A_expList seq);
       ^
y_C_compiler_yacc.y:311:67: warning: passing argument 3 of ‘A_WhileExp’ makes pointer from integer without a cast [-Wint-conversion]
         : WHILE '(' expression ')' statement {$$=A_WhileExp(pos,A_SeqExp(pos,$3),$5);}
                                                                   ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:115:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_WhileExp(A_pos pos, A_exp test, A_exp body);
       ^
y_C_compiler_yacc.y:311:17: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         : WHILE '(' expression ')' statement {$$=A_WhileExp(pos,A_SeqExp(pos,$3),$5);}
                 ^
y_C_compiler_yacc.y:312:95: warning: passing argument 2 of ‘A_SeqExp’ makes pointer from integer without a cast [-Wint-conversion]
         | DO statement WHILE '(' expression ')' ';' {$$=A_SeqExp(pos,A_ExpList($2,A_ExpList(A_WhileExp(pos,A_SeqExp(pos,$5),$2),null)));}
                                                                                               ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:112:7: note: expected ‘A_expList {aka struct A_expList_ *}’ but argument is of type ‘int’
 A_exp A_SeqExp(A_pos pos, A_expList seq);
       ^
y_C_compiler_yacc.y:312:116: warning: passing argument 3 of ‘A_WhileExp’ makes pointer from integer without a cast [-Wint-conversion]
         | DO statement WHILE '(' expression ')' ';' {$$=A_SeqExp(pos,A_ExpList($2,A_ExpList(A_WhileExp(pos,A_SeqExp(pos,$5),$2),null)));}
                                                                                                                    ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:115:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_WhileExp(A_pos pos, A_exp test, A_exp body);
       ^
y_C_compiler_yacc.y:312:41: warning: passing argument 1 of ‘A_ExpList’ makes pointer from integer without a cast [-Wint-conversion]
         | DO statement WHILE '(' expression ')' ';' {$$=A_SeqExp(pos,A_ExpList($2,A_ExpList(A_WhileExp(pos,A_SeqExp(pos,$5),$2),null)));}
                                         ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:149:11: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_expList A_ExpList(A_exp head, A_expList tail);
           ^
y_C_compiler_yacc.y:312:17: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | DO statement WHILE '(' expression ')' ';' {$$=A_SeqExp(pos,A_ExpList($2,A_ExpList(A_WhileExp(pos,A_SeqExp(pos,$5),$2),null)));}
                 ^
y_C_compiler_yacc.y:313:31: warning: passing argument 2 of ‘A_ForExp’ makes pointer from integer without a cast [-Wint-conversion]
         | FOR '(' expression_statement expression_statement ')' statement {$$=A_ForExp(pos,$3,$4,A_NilExp(pos),$6);}
                               ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:116:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_ForExp(A_pos pos, A_exp e1, A_exp e2, A_exp e3, A_exp body);
       ^
y_C_compiler_yacc.y:313:47: warning: passing argument 3 of ‘A_ForExp’ makes pointer from integer without a cast [-Wint-conversion]
         | FOR '(' expression_statement expression_statement ')' statement {$$=A_ForExp(pos,$3,$4,A_NilExp(pos),$6);}
                                               ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:116:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_ForExp(A_pos pos, A_exp e1, A_exp e2, A_exp e3, A_exp body);
       ^
y_C_compiler_yacc.y:313:77: warning: passing argument 5 of ‘A_ForExp’ makes pointer from integer without a cast [-Wint-conversion]
         | FOR '(' expression_statement expression_statement ')' statement {$$=A_ForExp(pos,$3,$4,A_NilExp(pos),$6);}
                                                                             ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:116:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_ForExp(A_pos pos, A_exp e1, A_exp e2, A_exp e3, A_exp body);
       ^
y_C_compiler_yacc.y:313:17: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | FOR '(' expression_statement expression_statement ')' statement {$$=A_ForExp(pos,$3,$4,A_NilExp(pos),$6);}
                 ^
y_C_compiler_yacc.y:314:76: warning: passing argument 2 of ‘A_SeqExp’ makes pointer from integer without a cast [-Wint-conversion]
         | FOR '(' expression_statement expression_statement expression ')' statement {$$=A_ForExp(pos,$3,$4,A_SeqExp(pos,$5),$7);}
                                                                            ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:112:7: note: expected ‘A_expList {aka struct A_expList_ *}’ but argument is of type ‘int’
 A_exp A_SeqExp(A_pos pos, A_expList seq);
       ^
y_C_compiler_yacc.y:314:31: warning: passing argument 2 of ‘A_ForExp’ makes pointer from integer without a cast [-Wint-conversion]
         | FOR '(' expression_statement expression_statement expression ')' statement {$$=A_ForExp(pos,$3,$4,A_SeqExp(pos,$5),$7);}
                               ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:116:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_ForExp(A_pos pos, A_exp e1, A_exp e2, A_exp e3, A_exp body);
       ^
y_C_compiler_yacc.y:314:47: warning: passing argument 3 of ‘A_ForExp’ makes pointer from integer without a cast [-Wint-conversion]
         | FOR '(' expression_statement expression_statement expression ')' statement {$$=A_ForExp(pos,$3,$4,A_SeqExp(pos,$5),$7);}
                                               ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:116:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_ForExp(A_pos pos, A_exp e1, A_exp e2, A_exp e3, A_exp body);
       ^
y_C_compiler_yacc.y:314:97: warning: passing argument 5 of ‘A_ForExp’ makes pointer from integer without a cast [-Wint-conversion]
         | FOR '(' expression_statement expression_statement expression ')' statement {$$=A_ForExp(pos,$3,$4,A_SeqExp(pos,$5),$7);}
                                                                                                 ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:116:7: note: expected ‘A_exp {aka struct A_exp_ *}’ but argument is of type ‘int’
 A_exp A_ForExp(A_pos pos, A_exp e1, A_exp e2, A_exp e3, A_exp body);
       ^
y_C_compiler_yacc.y:314:17: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | FOR '(' expression_statement expression_statement expression ')' statement {$$=A_ForExp(pos,$3,$4,A_SeqExp(pos,$5),$7);}
                 ^
y_C_compiler_yacc.y:319:17: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         : CONTINUE ';' {$$=A_ContinueExp(pos);}
                 ^
y_C_compiler_yacc.y:320:17: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | BREAK ';' {$$=A_BreakExp(pos);}
                 ^
y_C_compiler_yacc.y:321:17: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | RETURN ';' {$$=A_ReturnExp(pos,null);}
                 ^
y_C_compiler_yacc.y:322:47: warning: passing argument 2 of ‘A_SeqExp’ makes pointer from integer without a cast [-Wint-conversion]
         | RETURN expression ';' {$$=A_ReturnExp(pos,A_SeqExp(pos,$2));}
                                               ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:112:7: note: expected ‘A_expList {aka struct A_expList_ *}’ but argument is of type ‘int’
 A_exp A_SeqExp(A_pos pos, A_expList seq);
       ^
y_C_compiler_yacc.y:322:17: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | RETURN expression ';' {$$=A_ReturnExp(pos,A_SeqExp(pos,$2));}
                 ^
y_C_compiler_yacc.y:332:53: warning: passing argument 3 of ‘A_Field’ makes pointer from integer without a cast [-Wint-conversion]
         : parameter_declaration {$$=A_FieldList(A_Field(pos,null,$1),null);}
                                                     ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:141:9: note: expected ‘A_ty {aka struct A_ty_ *}’ but argument is of type ‘int’
 A_field A_Field(A_pos pos, S_symbol name, A_ty typ);
         ^
y_C_compiler_yacc.y:332:23: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         : parameter_declaration {$$=A_FieldList(A_Field(pos,null,$1),null);}
                       ^
y_C_compiler_yacc.y:333:53: warning: passing argument 3 of ‘A_Field’ makes pointer from integer without a cast [-Wint-conversion]
         | parameter_list ',' parameter_declaration {$$=A_FieldList(A_Field(pos,null,$3),$1);}
                                                     ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:141:9: note: expected ‘A_ty {aka struct A_ty_ *}’ but argument is of type ‘int’
 A_field A_Field(A_pos pos, S_symbol name, A_ty typ);
         ^
y_C_compiler_yacc.y:333:68: warning: passing argument 2 of ‘A_FieldList’ makes pointer from integer without a cast [-Wint-conversion]
         | parameter_list ',' parameter_declaration {$$=A_FieldList(A_Field(pos,null,$3),$1);}
                                                                    ^
In file included from y_C_compiler_yacc.y:5:0:
absyn.h:139:13: note: expected ‘A_fieldList {aka struct A_fieldList_ *}’ but argument is of type ‘int’
 A_fieldList A_FieldList(A_field head, A_fieldList tail);
             ^
y_C_compiler_yacc.y:333:23: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         | parameter_list ',' parameter_declaration {$$=A_FieldList(A_Field(pos,null,$3),$1);}
                       ^
make: *** [y.tab.o] Error 1
